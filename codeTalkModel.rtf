{\rtf1\ansi\ansicpg1252\cocoartf2820
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 'use client';\
\
import React, \{ useState \} from 'react';\
import OpenAI from 'openai';\
import \{ Task \} from '../../lib/firestore';  // Assure-toi que cette interface est bien d\'e9finie dans ton code\
import \{ getAuth \} from 'firebase/auth';\
import \{ addDoc, collection \} from 'firebase/firestore';\
import \{ getFirestore \} from 'firebase/firestore';\
import \{ firebaseApp \} from '../../lib/firebase';  // Assure-toi que firebaseApp est correctement initialis\'e9\
\
const db = getFirestore(firebaseApp);\
\
interface TaskModalProps \{\
  isOpen: boolean;\
  onClose: () => void;\
  onCreateTasks: (tasks: Task[]) => void;\
\}\
\
interface GeneratedTask extends Omit<Task, 'id' | 'userId'> \{\
  isSelected: boolean;\
\}\
\
export const TaskModal: React.FC<TaskModalProps> = (\{ isOpen, onClose, onCreateTasks \}) => \{\
  const [objective, setObjective] = useState('');\
  const [isLoading, setIsLoading] = useState(false);\
  const [generatedTasks, setGeneratedTasks] = useState<GeneratedTask[]>([]);\
\
  const generateTasks = async () => \{\
    setIsLoading(true);\
    try \{\
      const client = new OpenAI(\{\
        baseURL: process.env.NEXT_PUBLIC_OPENAI_API_BASE_URL,\
        apiKey: process.env.NEXT_PUBLIC_OPENAI_API_KEY,\
        dangerouslyAllowBrowser: true,\
      \});\
\
      const response = await client.chat.completions.create(\{\
        messages: [\
          \{\
            role: 'system',\
            content: 'You are a task planning assistant. Generate SMART (Specific, Measurable, Achievable, Relevant, Time-bound) tasks based on the user\\'s objective. Return ONLY a valid JSON array of tasks without any markdown formatting or additional text. Each task object should have these properties: \{"title": string, "description": string, "dueDate": ISO date string, "status": "pending", "category": string\}',\
          \},\
          \{ role: 'user', content: objective \},\
        ],\
        model: 'gpt-4o', // Si tu mod\'e8le est GPT-4\
        temperature: 0.7,\
        max_tokens: 4096,\
        top_p: 1,\
      \});\
\
      let tasksData;\
      try \{\
        const content = response.choices[0].message.content || '[]';\
        const jsonStr = content.replace(/^```json\\s*|```\\s*$/g, '').trim();\
        tasksData = JSON.parse(jsonStr);\
      \} catch (parseError) \{\
        console.error('Error parsing AI response:', parseError);\
        throw new Error('Failed to parse the AI response into valid JSON');\
      \}\
\
      setGeneratedTasks(\
        tasksData.map((task: \{ title: string; description: string; dueDate: string; status: string; category: string \}) => (\{\
          ...task,\
          dueDate: new Date(task.dueDate),\
          isSelected: true,\
        \}))\
      );\
    \} catch (error) \{\
      console.error('Error generating tasks:', error);\
      alert('Failed to generate tasks: ' + (error instanceof Error ? error.message : 'Unknown error'));\
    \} finally \{\
      setIsLoading(false);\
    \}\
  \};\
\
  const handleSubmit = async () => \{\
    const selectedTasks = generatedTasks\
      .filter((task) => task.isSelected)\
      .map((task) => (\{ ...task \}));\
\
    try \{\
      const auth = getAuth();\
      const user = auth.currentUser;\
\
      if (!user) \{\
        alert('Please sign in to create tasks');\
        return;\
      \}\
\
      const createdTasks = await Promise.all(\
        selectedTasks.map(async (task) => \{\
          const taskData = \{\
            ...task,\
            userId: user.uid,\
            status: 'pending' as const,\
            dueDate: task.dueDate,\
            createdAt: new Date(),\
            updatedAt: new Date(),\
          \};\
          const taskRef = collection(db, `users/$\{user.uid\}/tasks`);\
          const docRef = await addDoc(taskRef, taskData);\
          return \{\
            ...taskData,\
            id: docRef.id,\
          \};\
        \})\
      );\
\
      onCreateTasks(createdTasks);\
      onClose();\
    \} catch (error) \{\
      console.error('Error saving tasks:', error);\
      alert('Failed to save tasks: ' + (error instanceof Error ? error.message : 'Unknown error'));\
    \}\
  \};\
\
  if (!isOpen) return null;\
\
  return (\
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4">\
      <div className="bg-gray-900 text-white rounded-lg w-full max-w-2xl p-6 shadow-lg">\
        <h2 className="text-2xl font-bold mb-4">Create Tasks</h2>\
\
        <div className="mb-6">\
          <textarea\
            className="w-full p-3 border rounded-lg bg-gray-800 text-white focus:ring-2 focus:ring-emerald-500 focus:border-transparent"\
            placeholder="Enter your objective (e.g., I want to earn 10 million this year)"\
            value=\{objective\}\
            onChange=\{(e) => setObjective(e.target.value)\}\
            rows=\{3\}\
          />\
          <button\
            className="mt-2 bg-emerald-500 text-white px-4 py-2 rounded-lg hover:bg-emerald-600 disabled:bg-gray-300"\
            onClick=\{generateTasks\}\
            disabled=\{!objective.trim() || isLoading\}\
          >\
            \{isLoading ? 'Generating tasks...' : 'Generate Tasks'\}\
          </button>\
        </div>\
\
        \{generatedTasks.length > 0 && (\
          <div className="mb-6 max-h-96 overflow-y-auto">\
            \{generatedTasks.map((task, index) => (\
              <div key=\{index\} className="border rounded-lg p-4 mb-2 bg-gray-800">\
                <div className="flex items-center gap-2">\
                  <input\
                    type="checkbox"\
                    checked=\{task.isSelected\}\
                    onChange=\{(e) => \{\
                      const updatedTasks = [...generatedTasks];\
                      updatedTasks[index].isSelected = e.target.checked;\
                      setGeneratedTasks(updatedTasks);\
                    \}\}\
                    className="h-4 w-4"\
                  />\
                  <input\
                    type="text"\
                    value=\{task.title\}\
                    onChange=\{(e) => \{\
                      const updatedTasks = [...generatedTasks];\
                      updatedTasks[index].title = e.target.value;\
                      setGeneratedTasks(updatedTasks);\
                    \}\}\
                    className="flex-1 bg-gray-900 p-1 border-b focus:border-emerald-500"\
                  />\
                </div>\
              </div>\
            ))\}\
          </div>\
        )\}\
\
        <div className="flex justify-end gap-2">\
          <button onClick=\{onClose\} className="px-4 py-2 border rounded-lg bg-gray-800 hover:bg-gray-700">Cancel</button>\
          <button\
            onClick=\{handleSubmit\}\
            disabled=\{!generatedTasks.some((task) => task.isSelected)\}\
            className="px-4 py-2 bg-emerald-500 text-white rounded-lg hover:bg-emerald-600 disabled:bg-gray-300"\
          >\
            Create Selected Tasks\
          </button>\
        </div>\
      </div>\
    </div>\
  );\
\};\
}